nb = sf::st_relate(roads_amboise_small,roads_amboise_small, pattern = "F***T****")
class(nb)="list"
nb
library(gtclust)
A=to_adjmat(nb)
G=igraph::graph_from_adjacency(A)
?from_adjacency
G=igraph::graph_from_adjacency_matrix(A)
library(igraph)
co = components(G)
cio
co
plot(roads_amboise_small[co$membership==1,]|>st_geometry())
nb = sf::st_intersects(roads_amboise_small,roads_amboise_small)
class(nb)="list"
A=to_adjmat(nb)
G=igraph::graph_from_adjacency_matrix(A)
co = components(G)
plot(roads_amboise_small[co$membership==1,]|>st_geometry())
co
roads_connected = roads_amboise_small[co$membership==1,]
A=A[co$membership==1,co$membership==1]
G=igraph::graph_from_adjacency_matrix(A)
lnb=log_nb_sptree(A)
lnb
roads_amboise_as_node = roads_connected |> st_centroid()
plot(st_geometry(roads_amboise_as_node))
G
plot(G)
nb
nb = sf::st_intersects(roads_connected,roads_connected)
class(nb)="list"
nb[[1]]
XY=st_coordinates(roads_amboise_as_node)[,1:2]
XY
cbind(1,1:4,3)
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
})
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(links),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
plot(links_geom)
roads_amboise_small = read_sf("./data-raw/roads_amboise_small.gpkg")
nb = sf::st_intersects(roads_amboise_small,roads_amboise_small)
class(nb)="list"
library(igraph)
library(gtclust)
A=to_adjmat(nb)
G=igraph::graph_from_adjacency_matrix(A)
co = components(G)
roads_connected = roads_amboise_small[co$membership==1,]
nb = sf::st_intersects(roads_connected,roads_connected)
class(nb)="list"
A=to_adjmat(nb)
G=igraph::graph_from_adjacency_matrix(A)
roads_amboise_as_node = roads_connected |> st_centroid()
XY=st_coordinates(roads_amboise_as_node)[,1:2]
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(links),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
plot(links_geom)
components(G)
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
plot(links_geom)
library(ggplot2)
ggplot(links_geom)+geom_sf()
ggplot(links_geom)+geom_sf()+theme_void()
ggplot(links_geom)+geom_sf(size=0.5)+theme_void()
ggplot(links_geom)+geom_sf(size=0.1)+theme_void()
ggplot(links_geom)+geom_sf(size=0.3)+theme_void()
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node)+theme_void()
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}),crs=4326)
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node)+theme_void()
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
roads_amboise_as_node |> filter(bridge=="yes")
roads_amboise_as_node |> filter(bridge=="yes") |> pull(name)
ggplot(links_geom)+geom_sf(size=0.3)+theme_void()
ggplot(roads_connected)+geom_sf(size=0.3)+theme_void()
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
T=igraph::minimum.spanning.tree(G)
T
spT=igraph::minimum.spanning.tree(G)
spT
E(spT)
length(E(spT))
sample(length(E(spT)),1)
sample(length(E(spT)),1)
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
spT=igraph::minimum.spanning.tree(G)
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
?minimum.spanning.tree
spT=graph.bfs(G,sample(vcount(G),1))
spTcut = delete.edges(spT,sample(length(E(spT)),1))
comp = components(spTcut)
comp
spT=graph.bfs(G,sample(vcount(G),1))
spTcut = delete.edges(spT,sample(length(E(spT)),1))
spT
?graph.bfs
spT$order
spT$order[1:(vcount(G)/2)]
g2 = spT$order[(vcount(G)/2+1):vcount(G)]
g1 = spT$order[1:(vcount(G)/2)]
g2 = spT$order[(vcount(G)/2+1):vcount(G)]
roads_amboise_as_node
roads_amboise_as_node |> select(osm_id,name)
nodes=roads_amboise_as_node |> select(osm_id,name)
g1 = spT$order[1:(vcount(G)/2)]
g2 = spT$order[(vcount(G)/2+1):vcount(G)]
nodes$cl[g1]=1
nodes$cl[g2]=2
nodes$cl=NA
nodes$cl[g1]=1
nodes$cl[g2]=2
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=cl),size=0.3)+theme_void()
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
spT=unfold_tree(G,sample(vcount(G),1))
spT=unfold_tree(G,roots = sample(vcount(G),1))
g1 = spT$order[1:(vcount(G)/2)]
spT
delete_edges(spT,50)
delete_edges(graph(spT),50)
install.packages("tidygraph")
tidygraph::as_tbl_graph(spT)
spT
spT$tree
tidygraph::as_tbl_graph(spT$tree)
spTcut=delete_edges(graph(spT$tree),50)
spTcut=delete_edges(graph(spT$tree),c(50))
spTcut=delete_edges(graph(spT$tree),edges = c(50))
spTcut=delete_edges(spT$tree,edges = c(50))
co=components(spTcut)
co
spT=unfold_tree(G,roots = sample(vcount(G),1))
spTcut=delete_edges(spT$tree,edges = c(500))
co=components(spTcut)
nodes$cl = co$membership
spT=unfold_tree(G,roots = sample(vcount(G),1))
spT
spTcut=delete_edges(spT$tree,edges = c(500))
co=components(spTcut)
co
spT=minimum.spanning.tree(G)
spTcut=delete_edges(spT,edges = c(500))
co=components(spTcut)
nodes$cl = co$membership
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
plot(spT)
spT
E(spT)
degree(spT)
degree(spT)>5
degree(spT)==max(degree(spT))
which(degree(spT)==max(degree(spT)))[1]
spT=minimum.spanning.tree(G)
spTcut=delete_edges(spT,edges = which(degree(spT)==max(degree(spT)))[1])
co=components(spTcut)
co
degree(spT)
degree(spT)==0
sum(degree(spT)==0)
Vdmax=which(degree(spT)==max(degree(spT)))[1]
Vdmas
Vdmax
get.edge.ids(Vdmax)
get.edge.ids(spT,Vdmax)
V(G)[Vdmax]
get.edge.ids(spT,V(G)[Vdmax])
get.edge.ids(spT,V(qpT)[Vdmax])
get.edge.ids(spT,V(spT)[Vdmax])
spT
get.edge.ids(spT,c(V(spT)[Vdmax])
)
spT
spT=minimum.spanning.tree(G)
nbv= ecount(spT)
spT=minimum.spanning.tree(G)
nbv= ecount(spT)
spTcut=delete_edges(spT,edges = )
co=components(spTcut)
co$csize[2]
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<300){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<200){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
ggplot(links_geom|>st_transform(2154))+geom_sf(size=0.3)+geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+theme_void()
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
lnbt_tot
lnbt_A1
lnbt_A2
l_ncutset
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3)+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+
theme_void()+
scale_color_brewer(guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3)+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#999999")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost :",cut_cost))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost :",round(cut_cost,2)))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",exp(cut_cost),"times less spanning tree compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"K times less spanning tree compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<500){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
roads_connected |> st_cast("POINT")
roads_connected |> st_cast("POINT")
roads_connected |> st_cast("POINT") |> select(!duplicated(osm_id))
roads_connected |> st_cast("POINT") |> filter(!duplicated(osm_id))
roads_amboise_as_node = roads_connected |> st_cast("POINT") |> filter(!duplicated(osm_id))
XY=st_coordinates(roads_amboise_as_node)[,1:2]
nodes=roads_amboise_as_node |> select(osm_id,name)
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}),crs=4326)
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
roads_amboise_as_node = roads_connected |> st_centroid()
XY=st_coordinates(roads_amboise_as_node)[,1:2]
nodes=roads_amboise_as_node |> select(osm_id,name)
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}),crs=4326)
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<500){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
bridges(G)
?bridges
articulation_points(G)
biconnected_components(G)
library(R.matlab)
library(dplyr)
library(sf)
library(ggplot2)
nodes_raw  = readMat("./data-raw/NODES.mat")
nodes = data.frame(x=nodes_raw$Node[,1],y=nodes_raw$Node[,2],id=1:nrow(nodes_raw$Node))
links_raw  = readMat("./data-raw/LINKS.mat")
links = data.frame(from=links_raw$Link.1[,1],to=links_raw$Link.1[,2])
links=links |> left_join(nodes,by=c("from"="id"))|> left_join(nodes,by=c("to"="id"),suffix=c("","_to"))
Lp = as.matrix(links[,3:6])
links_geom = st_sfc(lapply(1:nrow(links),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
links$geometry = links_geom
links.sf=st_sf(links)
speeds_raw  = readMat("./data-raw/SPEEDS.mat")
col_n = paste0("T",floor(((1:288)*5)/60),"H",((1:288)*5)%%60)
days = paste0("D",7:9)
speeds = do.call(cbind,lapply(1:3,\(id){
df=data.frame(speeds_raw[[id]])
df[df==0]=NA
colnames(df)=paste0(days[id],col_n)
df
}))
speeds_long = speeds |> mutate(link_id=1:n())|>
tidyr::pivot_longer(-link_id,names_to = "day_h",values_to = "speed")
v=speeds_long |> filter(day_h=="D7T8H30"|day_h=="D7T8H35"|day_h=="D7T8H40") |>
group_by(link_id) |>
summarise(speed=mean(speed,na.rm=TRUE))
v$speed[is.na(v$speed)]=mean(v$speed,na.rm = TRUE)
links.sf$speed=v$speed
sum(is.na(links.sf$speed))
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+theme_void()
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$Ll)
plot(diff(hc_res$Ll))
plot(diff(hc_res$Ll[1:300]))
plot(diff(hc_res$Ll[1:400]))
