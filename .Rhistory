library(geohclust)
library(geohclust)
library(sf)
library(dplyr)
library(tibble)
library(ggplot2)
library(ggpubr)
data("pres2022_t1_communes")
deplist = c(56)
dep = pres2022_t1_communes |>
filter(INSEE_DEP %in% deplist) |>
select(p_gauche,p_droite,p_extreme_droite) |>
filter(!is.na(p_gauche))
res=geohclust_poly(dep)
plot(res)
res
df=dep
sf::st_geometry(df)
sapply(sf::st_geometry(df),\(u){sf::st_is(u,"MULTIPOLYGON")})
library(geohclust)
library(geohclust)
library(sf)
library(dplyr)
library(tibble)
library(ggplot2)
library(ggpubr)
data("pres2022_t1_communes")
deplist = c(56)
dep = pres2022_t1_communes |>
filter(INSEE_DEP %in% deplist) |>
select(p_gauche,p_droite,p_extreme_droite) |>
filter(!is.na(p_gauche))
res=geohclust_poly(dep)
plot(res)
res
update.packages("sf")
install.packages("sf")
install.packages(sf)
install.packages("sf")
library(sf)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(gtclust)
set.seed(19037561)
# Create the input matrix to be used.
X    <- matrix(runif(20*4),nrow=20,ncol=4)
N    <- nrow(X)
nb   <- lapply(1:N,\(i){setdiff(1:N,i)})
gthc <- gtclust::gtclust_graph(nb,X,method = "ward")
hc   <- hclust(0.5*dist(X)^2,method="ward.D")
testthat::expect_equal(hc$merge,gthc$merge)
testthat::expect_equal(cumsum(hc$height),gthc$height,tolerance = 10^-6)
set.seed(19037561)
# Create the input matrix to be used.
X     <- matrix(runif(20*4),nrow=20,ncol=4)
N     <- nrow(X)
nb    <- lapply(1:N,\(i){setdiff(1:N,i)})
gthc  <- gtclust::gtclust_graph(nb,X,method = "centroid")
hc    <- hclust(dist(X)^2,method="centroid")
testthat::expect_equal(hc$merge,geohc$merge)
testthat::expect_equal(cumsum(hc$height),geohc$height,tolerance = 10^-6)
# Fix the seed of the random number generator in order
# to have reproducible results.
# cf https://link.springer.com/article/10.1007/s00357-014-9161-z for the repex
set.seed(19037561)
# Create the input matrix to be used.
X     <- matrix(runif(20*4),nrow=20,ncol=4)
N     <- nrow(X)
nb    <- lapply(1:N,\(i){setdiff(1:N,i)})
gthc  <- gtclust::gtclust_graph(nb,X,method = "centroid")
hc    <- hclust(dist(X)^2,method="centroid")
testthat::expect_equal(hc$merge,gthc$merge)
testthat::expect_equal(cumsum(hc$height),gthc$height,tolerance = 10^-6)
set.seed(19037561)
# Create the input matrix to be used.
X     <- matrix(runif(20*4),nrow=20,ncol=4)
Xc    <- apply(X,2,\(col){(col-mean(col))/sd(col)})
N     <- nrow(X)
nb    <- lapply(1:N,\(i){setdiff(1:N,i)})
gthc  <- gtclust::gtclust_graph(nb,X,method = "ward",scaling = "zscore")
hc    <- hclust(0.5*dist(Xc)^2,method="ward")
testthat::expect_equal(hc$merge,gthc$merge)
testthat::expect_equal(cumsum(hc$height),gthc$height,tolerance = 10^-6)
set.seed(19037561)
# Create the input matrix to be used.
X     <- matrix(runif(20*4),nrow=20,ncol=4)
Xc    <- apply(X,2,\(col){(col-mean(col))/sd(col)})
N     <- nrow(X)
nb    <- lapply(1:N,\(i){setdiff(1:N,i)})
gthc  <- gtclust::gtclust_graph(nb,X,method = "ward",scaling = "zscore")
hc    <- hclust(0.5*dist(Xc)^2,method="ward.D")
testthat::expect_equal(hc$merge,gthc$merge)
testthat::expect_equal(cumsum(hc$height),gthc$height,tolerance = 10^-6)
gr <- sf::st_make_grid(sf::st_polygon(list(matrix(c(0,100,100,0,0,0,0,100,100,0),ncol=2))),cellsize = 10)
nb <-  sf::st_intersects(gr)
class(nb) <- "list"
set.seed(1234)
X <- rbind(cbind(rnorm(50)+5,rnorm(50)+5),cbind(rnorm(50)-5,rnorm(50)-5))
df.sf <- sf::st_sf(geometry=gr,data.frame(X))
gthc <- gtclust::gtclust_graph(nb,X,method = "ward")
testthat::expect_equal(cutree(gthc,2),rep(1:2,each=50))
X[1,] = c(-5,-5)
gthc=gtclust::gtclust_graph(nb,X,method = "ward")
testthat::expect_equal(cutree(gthc,3),c(1,rep(2:3,each=49),3))
gr <- sf::st_make_grid(sf::st_polygon(list(matrix(c(0,100,100,0,0,0,0,100,100,0),ncol=2))),cellsize = 10)
nb <- sf::st_intersects(gr)
class(nb) <- "list"
set.seed(1234)
X <- rbind(cbind(rnorm(50)+5,rnorm(50)+5),cbind(rnorm(50)-5,rnorm(50)-5))
df.sf <- sf::st_sf(geometry=gr,data.frame(X))
gthc  <- gtclust::gtclust_poly(df.sf,method = "ward")
cl <- rep(1:2,each=50)
names(cl) <- 1:100
testthat::expect_equal(cutree(gthc,2),cl)
geoagg <- geocutree(gthc,2)
testthat::expect_equal(nrow(geoagg),2)
testthat::expect_equal(sf::st_equals(geoagg$geometry[1],sf::st_union(df.sf[cutree(gthc,2)==1,]))[[1]],1)
geoaggX <- as.matrix(geoagg[,-1] |> sf::st_drop_geometry())
cm <- colMeans(X[cutree(gthc,2)==1,])
names(cm) <- colnames(geoaggX)
testthat::expect_equal(geoaggX[1,],cm)
df.sf[1,1:2] <- c(-5,-5)
gthc <- gtclust::gtclust_poly(df.sf,method = "ward")
cl <- c(1,rep(2:3,each=49),3)
names(cl) <- 1:100
testthat::expect_equal(cutree(gthc,3),cl)
geoagg <- geocutree(gthc,3)
testthat::expect_equal(nrow(geoagg),3)
testthat::expect_equal(sf::st_equals(geoagg$geometry[1],sf::st_union(df.sf[cutree(gthc,3)==1,]))[[1]],1)
geoaggX <- as.matrix(geoagg[,-1] |> sf::st_drop_geometry())
cm=colMeans(X[cutree(gthc,3)==2,])
names(cm)=colnames(geoaggX)
testthat::expect_equal(geoaggX[2,],cm)
library(gtclust)
gr <- sf::st_make_grid(sf::st_polygon(list(matrix(c(0,100,100,0,0,0,0,100,100,0),ncol=2))),cellsize = 10)
nb <- sf::st_intersects(gr)
class(nb) <- "list"
set.seed(1234)
X <- rbind(cbind(rnorm(50)+5,rnorm(50)+5),cbind(rnorm(50)-5,rnorm(50)-5))
df.sf <- sf::st_sf(geometry=gr,data.frame(X))
gthc  <- gtclust::gtclust_poly(df.sf,method = "ward")
cl <- rep(1:2,each=50)
names(cl) <- 1:100
testthat::expect_equal(cutree(gthc,2),cl)
geoagg <- geocutree(gthc,2)
testthat::expect_equal(nrow(geoagg),2)
testthat::expect_equal(sf::st_equals(geoagg$geometry[1],sf::st_union(df.sf[cutree(gthc,2)==1,]))[[1]],1)
geoaggX <- as.matrix(geoagg[,-1] |> sf::st_drop_geometry())
cm <- colMeans(X[cutree(gthc,2)==1,])
names(cm) <- colnames(geoaggX)
testthat::expect_equal(geoaggX[1,],cm)
df.sf[1,1:2] <- c(-5,-5)
gthc <- gtclust::gtclust_poly(df.sf,method = "ward")
cl <- c(1,rep(2:3,each=49),3)
names(cl) <- 1:100
testthat::expect_equal(cutree(gthc,3),cl)
geoagg <- geocutree(gthc,3)
testthat::expect_equal(nrow(geoagg),3)
testthat::expect_equal(sf::st_equals(geoagg$geometry[1],sf::st_union(df.sf[cutree(gthc,3)==1,]))[[1]],1)
geoaggX <- as.matrix(geoagg[,-1] |> sf::st_drop_geometry())
cm <- colMeans(X[cutree(gthc,3)==2,])
names(cm) <- colnames(geoaggX)
testthat::expect_equal(geoaggX[2,],cm)
library(gtclust)
library(gtclust)
data("modesshare")
mode()
modesshare
library(sf)
modesshare = modesshare |>
filter(dep in c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 100)
modesshare = modesshare |>
filter(dep in c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 100)
modesshare = modesshare |>
filter(dep %in% c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 100)
modesshare = modesshare |>
filter(dep %in% c(75,77,78,91,92,93,95,94))
modesshare = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 100)
modesshare = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94))
library(dplyr)
modesshare = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94))
modesshare = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 100)
modesshare_small = modesshare
usethis::use_data(modesshare_small)
plot(modesshare_small)
plot(modesshare_small %>% st_geometry())
plot(modesshare_small %>% st_geometry())
plot(modesshare_small %>% st_geometry())
data("modesshare")
modesshare_small = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 50)
usethis::use_data(modesshare_small,overwrite = TRUE)
modesshare_small = modesshare |>
filter(DEP %in% c(75,77,78,91,92,93,95,94)) |>
st_simplify(preserveTopology = TRUE,dTolerance = 20)
usethis::use_data(modesshare_small,overwrite = TRUE)
modesshare=modesshare_small
usethis::use_data(modesshare,overwrite = TRUE)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
pkgdown::build_site()
library(gtclust)
library(gtclust)
library(dplyr)
library(sf)
data("modesshare")
hc=gtclust_poly(modesshare)
plot(hc)
cutree(hc,k=30) |> head(20)
plot(geocutree(hc,k=500))
modesshare_agg = geocutree(hc,k=500)
library(tmap)
modesshare_agg
install.packages("rmapshaper")
library(rmapshaper)
load("../../Téléchargements/modesshare.rda")
modesshare_idf = modesshare |> filter(DEP %in% c(75,77,78,91,92,93,95,94))
library()
library(sf)
library(dplyr)
modesshare_idf = modesshare |> filter(DEP %in% c(75,77,78,91,92,93,95,94))
library(rmapshaper)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.01)
hc=gtclust::gtclust_poly(modesshare)
modesh
modesshare
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.1)
hc=gtclust::gtclust_poly(modesshare)
?ms_simplify
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.25)
hc=gtclust::gtclust_poly(modesshare)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.5)
hc=gtclust::gtclust_poly(modesshare)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.5,no_repair = TRUE)
hc=gtclust::gtclust_poly(modesshare)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.5,method = "dp")
hc=gtclust::gtclust_poly(modesshare)
class(modesshare)
modesshare = ms_simplify(modesshare_idf, keep=0.5,method = "dp")
class(modesshare)
hc=gtclust::gtclust_poly(modesshare)
modesshare = ms_simplify(modesshare_idf, keep=0.5,method = "dp") |> st_make_valid()
hc=gtclust::gtclust_poly(modesshare)
modesshare
df = modesshare
sapply(sf::st_geometry(df),function(u){sf::st_is(u,"MULTIPOLYGON")})
which(!sapply(sf::st_geometry(df),function(u){sf::st_is(u,"MULTIPOLYGON")}))
df[1273,]
df[1273,"geometry"]
?ms_simplify
modesshare = ms_simplify(modesshare_idf, keep=0.1,method = "vis") |> st_make_valid()
plot(st_geometry(modesshare))
modesshare
modesshare[1273,"geometry"]
gtclust::gtclust_poly(modesshare,metod="bayes_mom")
gtclust::gtclust_poly(modesshare,method="bayes_mom")
gtclust::gtclust_poly(modesshare %>% st_cast("MULTIPOLYGON"),method="bayes_mom")
gtclust::gtclust_poly(modesshare %>% st_cast("MULTIPOLYGON"),method="ward")
gtclust::gtclust_poly(modesshare %>% st_cast("MULTIPOLYGON"),method="ward",scaling = "zscore")
a=gtclust::gtclust_poly(modesshare %>% st_cast("MULTIPOLYGON"),method="ward",scaling = "zscore")
plot(a)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.01) |> st_make_valid() |> st_cast("MULTIPOLYGON")
usethis::use_data(modesshare,overwrite = TRUE)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.02) |> st_make_valid() |> st_cast("MULTIPOLYGON")
usethis::use_data(modesshare,overwrite = TRUE)
modesshare = ms_simplify(modesshare_idf, keep_shapes = FALSE, keep=0.03) |> st_make_valid() |> st_cast("MULTIPOLYGON")
usethis::use_data(modesshare,overwrite = TRUE)
modesshare = ms_simplify(modesshare_idf,  keep=0.03) |> st_make_valid() |> st_cast("MULTIPOLYGON")
usethis::use_data(modesshare,overwrite = TRUE)
library(gtclust)
data("modesshare")
hc=gtclust_poly(modesshare,method="bayes_mom")
gtclust_poly(modesshare,method="ward",scaling="zscore")
library(gtclust)
gtclust_poly(modesshare,method="bayes_mom")
devtools::document()
pkgdown::build_home()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
