co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=nodes,aes(color=factor(cl)),size=0.6)+theme_void()
ggplot(links_geom|>st_transform(2154))+geom_sf(size=0.3)+geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+theme_void()
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
lnbt_tot
lnbt_A1
lnbt_A2
l_ncutset
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3)+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+
theme_void()+
scale_color_brewer(guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3)+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=0.6)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#999999")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost :",cut_cost))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost :",round(cut_cost,2)))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",exp(cut_cost),"times less spanning tree compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"K times less spanning tree compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut tan without"))
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000000),"M times less spanning trees compatible with the cut than without"))
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<100){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<500){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
roads_connected |> st_cast("POINT")
roads_connected |> st_cast("POINT")
roads_connected |> st_cast("POINT") |> select(!duplicated(osm_id))
roads_connected |> st_cast("POINT") |> filter(!duplicated(osm_id))
roads_amboise_as_node = roads_connected |> st_cast("POINT") |> filter(!duplicated(osm_id))
XY=st_coordinates(roads_amboise_as_node)[,1:2]
nodes=roads_amboise_as_node |> select(osm_id,name)
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}),crs=4326)
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
roads_amboise_as_node = roads_connected |> st_centroid()
XY=st_coordinates(roads_amboise_as_node)[,1:2]
nodes=roads_amboise_as_node |> select(osm_id,name)
Lp = do.call(rbind,lapply(1:length(nb),\(l){
cbind(XY[l,1],XY[l,2],XY[nb[[l]],])
}))
links_geom = st_sfc(lapply(1:nrow(Lp),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}),crs=4326)
ggplot(links_geom)+geom_sf(size=0.3)+geom_sf(data=roads_amboise_as_node,size=0.3)+theme_void()
spT=minimum.spanning.tree(G)
nbe= ecount(spT)
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
while(co$csize[2]<500){
spTcut=delete_edges(spT,edges = sample(nbe,1))
co=components(spTcut)
}
co
nodes$cl = co$membership
lnbt_tot = log_nb_sptree(A)
A1=A[co$membership==1,co$membership==1]
lnbt_A1 = log_nb_sptree(A1)
A2=A[co$membership==2,co$membership==2]
lnbt_A2 = log_nb_sptree(A2)
l_ncutset=log(sum(A[co$membership==1,co$membership==2]))
cut_cost = lnbt_tot-lnbt_A1-lnbt_A2-l_ncutset
cut_cost
exp(cut_cost)
ggplot(links_geom|>st_transform(2154))+
geom_sf(size=0.3,color="#bbbbbb")+
geom_sf(data=nodes|>st_transform(2154),aes(color=factor(cl)),size=1)+
theme_void()+
scale_color_brewer(palette = "Set1",guide="none")+
ggtitle(paste0("Cut cost: ",round(cut_cost,2)),paste0("so as many as ",round(exp(cut_cost)/1000),"(K) times less spanning trees compatible with the cut than without"))
bridges(G)
?bridges
articulation_points(G)
biconnected_components(G)
library(R.matlab)
library(dplyr)
library(sf)
library(ggplot2)
nodes_raw  = readMat("./data-raw/NODES.mat")
nodes = data.frame(x=nodes_raw$Node[,1],y=nodes_raw$Node[,2],id=1:nrow(nodes_raw$Node))
links_raw  = readMat("./data-raw/LINKS.mat")
links = data.frame(from=links_raw$Link.1[,1],to=links_raw$Link.1[,2])
links=links |> left_join(nodes,by=c("from"="id"))|> left_join(nodes,by=c("to"="id"),suffix=c("","_to"))
Lp = as.matrix(links[,3:6])
links_geom = st_sfc(lapply(1:nrow(links),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
links$geometry = links_geom
links.sf=st_sf(links)
speeds_raw  = readMat("./data-raw/SPEEDS.mat")
col_n = paste0("T",floor(((1:288)*5)/60),"H",((1:288)*5)%%60)
days = paste0("D",7:9)
speeds = do.call(cbind,lapply(1:3,\(id){
df=data.frame(speeds_raw[[id]])
df[df==0]=NA
colnames(df)=paste0(days[id],col_n)
df
}))
speeds_long = speeds |> mutate(link_id=1:n())|>
tidyr::pivot_longer(-link_id,names_to = "day_h",values_to = "speed")
v=speeds_long |> filter(day_h=="D7T8H30"|day_h=="D7T8H35"|day_h=="D7T8H40") |>
group_by(link_id) |>
summarise(speed=mean(speed,na.rm=TRUE))
v$speed[is.na(v$speed)]=mean(v$speed,na.rm = TRUE)
links.sf$speed=v$speed
sum(is.na(links.sf$speed))
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+theme_void()
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$Ll)
plot(diff(hc_res$Ll))
plot(diff(hc_res$Ll[1:300]))
plot(diff(hc_res$Ll[1:400]))
library(gtclust)
source("data-raw/shenzen.R")
plot(hc_res$PriorInter)
plot(hc_res$PriorIntra)
plot(hc_res$PriorInter)
library(gtclust)
source("data-raw/shenzen.R")
plot(hc_res$PriorInter)
nb = sf::st_relate(links.sf,links.sf, pattern = "F***T****")
class(nb)="list"
k_max= 100
N=nrow(links)
pr=sptree_prior(hc_res,k_max)
pr$Cnk=lgamma(N)-lgamma(1:k_max)-lgamma(2013-2:(k_max+1))
pr$ptot=pr$inter+pr$intra-pr$intra[1]#-pr$Cnk-lgamma(1:k_max+1)
pr$Ll=-hc_res$Ll[N:(N-k_max+1)]
pr$intra_comp=hc_res$PriorIntra[N:(N-k_max+1)]
pr$inter_comp=hc_res$PriorInter[N:(N-k_max+1)]
pr
pr$Ll=hc_res$Ll[N:(N-k_max+1)]
pr$intra_comp=hc_res$PriorIntra[N:(N-k_max+1)]
pr$inter_comp=hc_res$PriorInter[N:(N-k_max+1)]
plot(hc_res$Ll)
library(gtclust)
source("data-raw/shenzen.R")
library(gtclust)
source("data-raw/shenzen.R")
nb = sf::st_relate(links.sf,links.sf, pattern = "F***T****")
class(nb)="list"
pr$Ll=hc_res$Ll[N:(N-k_max+1)]
pr
plot(pr$Ll)
plot(hc_res$Ll)
plot(hc_res$PriorIntra)
plot(hc_res$PriorInter)
plot(hc_res$PriorInter+hc_res$PriorIntra)
plot(hc_res$PriorInter)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(res$Ll)
plot(hc_res$Ll)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$Ll)
plot(hc_res$PriorIntra)
plot(hc_res$PriorIntra+hc_res$PriorInter)
plot(hc_res$PriorIntra+hc_res$PriorInter+hc_res$PriorK)
plot(hc_res$PriorK)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$PriorK)
plot(hc_res$Ll)
plot(hc_res$Ll)
plot(-hc_res$PriorInter)
plot(-hc_res$PriorInter-hc_res$PriorIntra)
plot(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll+hc_res$PriorK)
which.min(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll+hc_res$PriorK)
2013-which.min(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll+hc_res$PriorK)
which.min(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll)
2013-which.min(hc_res$Ll+hc_res$PriorK)
2013-which.min(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll+hc_res$PriorK)
2013-which.min(-hc_res$PriorInter-hc_res$PriorIntra+hc_res$Ll)
plot(hc_res$PriorK)
plot(hc_res$Ll)
plot(-hc_res$Ll)
plot(hc_res$PriorIntra)
plot(hc_res$PriorInter)
plot(hc_res$Ll)
plot(-hc_res$Ll)
plot(hc_res$PriorInter)
plot(hc_res$PriorInter+hc_res$PriorIntra)
plot(hc_res$Ll+hc_res$PriorInter+hc_res$PriorIntra)
plot(hc_res)
library(R.matlab)
library(dplyr)
library(sf)
library(ggplot2)
nodes_raw  = readMat("./data-raw/NODES.mat")
nodes = data.frame(x=nodes_raw$Node[,1],y=nodes_raw$Node[,2],id=1:nrow(nodes_raw$Node))
links_raw  = readMat("./data-raw/LINKS.mat")
links = data.frame(from=links_raw$Link.1[,1],to=links_raw$Link.1[,2])
links=links |> left_join(nodes,by=c("from"="id"))|> left_join(nodes,by=c("to"="id"),suffix=c("","_to"))
Lp = as.matrix(links[,3:6])
links_geom = st_sfc(lapply(1:nrow(links),\(l){ st_linestring(rbind(Lp[l,1:2],Lp[l,3:4]))}))
links$geometry = links_geom
links.sf=st_sf(links)
speeds_raw  = readMat("./data-raw/SPEEDS.mat")
col_n = paste0("T",floor(((1:288)*5)/60),"H",((1:288)*5)%%60)
days = paste0("D",7:9)
speeds = do.call(cbind,lapply(1:3,\(id){
df=data.frame(speeds_raw[[id]])
df[df==0]=NA
colnames(df)=paste0(days[id],col_n)
df
}))
speeds_long = speeds |> mutate(link_id=1:n())|>
tidyr::pivot_longer(-link_id,names_to = "day_h",values_to = "speed")
v=speeds_long |> filter(day_h=="D7T8H30"|day_h=="D7T8H35"|day_h=="D7T8H40") |>
group_by(link_id) |>
summarise(speed=mean(speed,na.rm=TRUE))
v$speed[is.na(v$speed)]=mean(v$speed,na.rm = TRUE)
links.sf$speed=v$speed
sum(is.na(links.sf$speed))
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme_void()+
theme(legend.position="bottom")+
ggtitle("Shenzen speed distribution","8h30-8h45")
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
library(gtclust)
library(gtclust)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$PriorK)
plot(hc_res$PriorIntra)
plot(hc_res$PriorInter)
plot(hc_res$PriorInter+hc_res$PriorIntra)
plot(hc_res$PriorInter+hc_res$PriorIntra-hc_res$PriorInter[1])
plot(hc_res$Ll)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$Ll)
plot(hc_res$PriorK)
plot(hc_res$Ll)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$PriorK)
lgamma(2013)
plot(hc_res$PriorK-lgamma(2013))
plot(hc_res$PriorK+lgamma(2013))
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$PriorK)
plot(hc_res$Ll)
plot(hc_res$Ll+hc_res$PriorK)
library(gtclust)
hc_res=gtclust_lines(links.sf |> select(speed),gtmethod_bayes_dgmm())
plot(hc_res$Ll)
plot(hc_res)
plot(hc_res$height)
plot(hc_res$Ll)
hc_res$Ll=-hc_res$Ll
plot(hc_res$Ll)
plot(hc_res)
geocutree(hc_res,3)
plot(geocutree(hc_res,3)|>select(cl))
plot(geocutree(hc_res,5)|>select(cl))
plot(geocutree(hc_res,7)|>select(cl))
plot(hc_res)
plot(geocutree(hc_res,14)|>select(cl))
plot(geocutree(hc_res,12)|>select(cl))
ggplot(geocutree(hc_res,12)|>select(cl))+geom_sf(aes(color=factor(cl)))
ggplot(geocutree(hc_res,8)|>select(cl))+geom_sf(aes(color=factor(cl)))
ggplot(geocutree(hc_res,12)|>select(cl))+geom_sf(aes(color=factor(cl)))+theme_void()base_size =
ggplot(geocutree(hc_res,12)|>select(cl))+geom_sf(aes(color=factor(cl)))+theme_void()
ggplot(geocutree(hc_res,12)|>select(cl))+geom_sf(aes(color=factor(cl)))+theme_void()+scale_color_brewer(paletter="Set1",guide="none")
ggplot(geocutree(hc_res,12)|>select(cl))+geom_sf(aes(color=factor(cl)))+theme_void()+scale_color_brewer(palette="Set1",guide="none")
ggplot(geocutree(hc_res,9)|>select(cl))+geom_sf(aes(color=factor(cl)))+theme_void()+scale_color_brewer(palette="Set1",guide="none")
library(gtclust)
geocutree(hc_res,14)
df=geocutree(hc_res,14)
df$n.Freq
ggplot(geocutree(hc_res,14)|>select(cl)|>filter(n.Freq>50))+geom_sf(aes(color=factor(cl)))+theme_void()+scale_color_brewer(palette="Set1",guide="none")
cl=cutree(hc_res,14)
table(cl)
as.vector(table(cl))
library(gtclust)
geocutree(hc_res,14) |> mutate(L=st_length(geometry))
geocutree(hc_res,14) |> mutate(L=st_length(geometry)) |> pull(L)
geocutree(hc_res,14) |> mutate(L=st_length(geometry)) |> filter(L>2000)
geocutree(hc_res,14) |> mutate(L=st_length(geometry)) |> filter(L>2500)
gt_res= geocutree(hc_res,14) |> mutate(L=st_length(geometry)) |> filter(L>2500)
ggplot(gtres)+
geom_sf(aes(color=factor(cl)))+
theme_void()+
scale_color_brewer(palette="Set1",guide="none")
ggplot(gt_res)+
geom_sf(aes(color=factor(cl)))+
theme_void()+
scale_color_brewer(palette="Set1",guide="none")
ggplot(gt_res)+
geom_sf(aes(color=factor(cl)))+
theme_void()+
scale_color_brewer(palette="Set1",guide="none")+
ggtitle("Shenzen clustering results","8h30-8h45")
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme_void()+
theme(legend.position="bottom")+
ggtitle("Shenzen speed distribution","8h30-8h45")
ggplot(gt_res)+
geom_sf(aes(color=speed))+
theme_void()+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
ggtitle("Shenzen clustering results","8h30-8h45")
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme_void()+
theme(legend.position="bottom")+
ggtitle("Shenzen speed distribution","8h30-8h45")
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme_void()+
theme(legend.position="bottom")+
ggtitle("Shenzen speed distribution","8h30-8h45")
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1,limits=c(0,65))+
theme_void()+
theme(legend.position="bottom")+
ggtitle("Shenzen speed distribution","8h30-8h45")
ggplot(gt_res)+
geom_sf(aes(color=speed*3.6))+
theme_void()+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme(legend.position="bottom")+
ggtitle("Shenzen clustering results","8h30-8h45")
ggplot(links.sf)+geom_sf(aes(color=speed*3.6),size=1.1)+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1,limits=c(0,65))+
theme_void()+
theme(legend.position="left")+
ggtitle("Shenzen speed distribution","8h30-8h45")
ggplot(gt_res)+
geom_sf(aes(color=speed*3.6))+
theme_void()+
scale_color_distiller("Speed (km/h)",palette="RdYlGn",direction = 1)+
theme(legend.position="left")+
ggtitle("Shenzen clustering results","8h30-8h45")
ggplot(gt_res)+
geom_sf(aes(color=factor(cl)))+
theme_void()+
scale_color_brewer(palette="Set1",guide="none")+
ggtitle("Shenzen clustering results","8h30-8h45")
library(gtclust)
