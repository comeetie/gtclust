// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ldirpost
double ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// grad_ldirpost
NumericVector grad_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_grad_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// dH_ldirpost
NumericVector dH_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_dH_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(dH_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// z_ldirpost
double z_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_z_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(z_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// logdetH_ldirpost
double logdetH_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_logdetH_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(logdetH_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// iH_ldirpost
NumericMatrix iH_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_iH_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(iH_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// H_ldirpost
NumericMatrix H_ldirpost(const NumericVector& beta, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_H_ldirpost(SEXP betaSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(H_ldirpost(beta, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// ldirpost_norm
List ldirpost_norm(const NumericVector beta0, int n, const NumericVector& lambda, const NumericVector& lpi);
RcppExport SEXP _gtclust_ldirpost_norm(SEXP beta0SEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    rcpp_result_gen = Rcpp::wrap(ldirpost_norm(beta0, n, lambda, lpi));
    return rcpp_result_gen;
END_RCPP
}
// dirichlet_evidence
double dirichlet_evidence(int n, const NumericVector& lambda, const NumericVector& lpi, const NumericVector& pi);
RcppExport SEXP _gtclust_dirichlet_evidence(SEXP nSEXP, SEXP lambdaSEXP, SEXP lpiSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lpi(lpiSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(dirichlet_evidence(n, lambda, lpi, pi));
    return rcpp_result_gen;
END_RCPP
}
// glm_fit
List glm_fit(const arma::mat& X, const arma::colvec& y, const std::string& family_name, const double lambda, int maxit, double tol);
RcppExport SEXP _gtclust_glm_fit(SEXP XSEXP, SEXP ySEXP, SEXP family_nameSEXP, SEXP lambdaSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family_name(family_nameSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(glm_fit(X, y, family_name, lambda, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// glm_laplace_evidence
double glm_laplace_evidence(const arma::mat& X, const arma::colvec& y, List fit);
RcppExport SEXP _gtclust_glm_laplace_evidence(SEXP XSEXP, SEXP ySEXP, SEXP fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type fit(fitSEXP);
    rcpp_result_gen = Rcpp::wrap(glm_laplace_evidence(X, y, fit));
    return rcpp_result_gen;
END_RCPP
}
// delta_merge_post
double delta_merge_post(List fit1, List fit2, double lambda);
RcppExport SEXP _gtclust_delta_merge_post(SEXP fit1SEXP, SEXP fit2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fit1(fit1SEXP);
    Rcpp::traits::input_parameter< List >::type fit2(fit2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_merge_post(fit1, fit2, lambda));
    return rcpp_result_gen;
END_RCPP
}
// log_mvn_pdf
double log_mvn_pdf(arma::colvec x, arma::colvec mu, arma::mat S);
RcppExport SEXP _gtclust_log_mvn_pdf(SEXP xSEXP, SEXP muSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(log_mvn_pdf(x, mu, S));
    return rcpp_result_gen;
END_RCPP
}
// hclustcc_cpp
List hclustcc_cpp(const List nb, const NumericMatrix& X, List method_obj, bool display_progress);
RcppExport SEXP _gtclust_hclustcc_cpp(SEXP nbSEXP, SEXP XSEXP, SEXP method_objSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type method_obj(method_objSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(hclustcc_cpp(nb, X, method_obj, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// bayesian_hclustcc_cpp
List bayesian_hclustcc_cpp(const List nb, const NumericMatrix& X, List method_obj, bool display_progress, bool approx);
RcppExport SEXP _gtclust_bayesian_hclustcc_cpp(SEXP nbSEXP, SEXP XSEXP, SEXP method_objSEXP, SEXP display_progressSEXP, SEXP approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type method_obj(method_objSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type approx(approxSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesian_hclustcc_cpp(nb, X, method_obj, display_progress, approx));
    return rcpp_result_gen;
END_RCPP
}
// bayesian_hclustcc_sbm_cpp
List bayesian_hclustcc_sbm_cpp(const List nb, const NumericMatrix& graph_triplet, bool display_progress, bool approx, double lambda_in, double lambda_ext);
RcppExport SEXP _gtclust_bayesian_hclustcc_sbm_cpp(SEXP nbSEXP, SEXP graph_tripletSEXP, SEXP display_progressSEXP, SEXP approxSEXP, SEXP lambda_inSEXP, SEXP lambda_extSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type graph_triplet(graph_tripletSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_in(lambda_inSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_ext(lambda_extSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesian_hclustcc_sbm_cpp(nb, graph_triplet, display_progress, approx, lambda_in, lambda_ext));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gtclust_ldirpost", (DL_FUNC) &_gtclust_ldirpost, 4},
    {"_gtclust_grad_ldirpost", (DL_FUNC) &_gtclust_grad_ldirpost, 4},
    {"_gtclust_dH_ldirpost", (DL_FUNC) &_gtclust_dH_ldirpost, 4},
    {"_gtclust_z_ldirpost", (DL_FUNC) &_gtclust_z_ldirpost, 4},
    {"_gtclust_logdetH_ldirpost", (DL_FUNC) &_gtclust_logdetH_ldirpost, 4},
    {"_gtclust_iH_ldirpost", (DL_FUNC) &_gtclust_iH_ldirpost, 4},
    {"_gtclust_H_ldirpost", (DL_FUNC) &_gtclust_H_ldirpost, 4},
    {"_gtclust_ldirpost_norm", (DL_FUNC) &_gtclust_ldirpost_norm, 4},
    {"_gtclust_dirichlet_evidence", (DL_FUNC) &_gtclust_dirichlet_evidence, 4},
    {"_gtclust_glm_fit", (DL_FUNC) &_gtclust_glm_fit, 6},
    {"_gtclust_glm_laplace_evidence", (DL_FUNC) &_gtclust_glm_laplace_evidence, 3},
    {"_gtclust_delta_merge_post", (DL_FUNC) &_gtclust_delta_merge_post, 3},
    {"_gtclust_log_mvn_pdf", (DL_FUNC) &_gtclust_log_mvn_pdf, 3},
    {"_gtclust_hclustcc_cpp", (DL_FUNC) &_gtclust_hclustcc_cpp, 4},
    {"_gtclust_bayesian_hclustcc_cpp", (DL_FUNC) &_gtclust_bayesian_hclustcc_cpp, 5},
    {"_gtclust_bayesian_hclustcc_sbm_cpp", (DL_FUNC) &_gtclust_bayesian_hclustcc_sbm_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_gtclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
